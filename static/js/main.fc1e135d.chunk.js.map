{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["PayTheoryContext","React","CreditCardInput","id","CreditCardProvider","props","useState","loading","setLoading","complete","setComplete","valid","setValid","error","setError","payTheory","setPayTheory","useEffect","tags","initPayTheory","ready","acted","validation","errored","value","mount","console","initTransaction","buyerOptions","styles","default","color","fontSize","success","App","useContext","mounted","setMounted","onSubmit","e","preventDefault","apiKey","client","amount","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAmBC,oBAEnBC,EAAkB,kBAAO,yBAAKC,GAAG,2BACjCC,EAAqB,SAACC,GAAU,MACXC,oBADW,GAClCC,EADkC,KACzBC,EADyB,OAETF,oBAFS,GAElCG,EAFkC,KAExBC,EAFwB,OAGfJ,oBAHe,GAGlCK,EAHkC,KAG3BC,EAH2B,OAIfN,wBAJe,GAIlCO,EAJkC,KAI3BC,EAJ2B,OAKPR,wBALO,GAKlCS,EALkC,KAKvBC,EALuB,KAyBzC,OAlBAC,qBAAU,YACgB,WAAH,IAAc,gBACGC,WAAYb,EAAZa,OAA0Bb,EAA1Ba,OAAwCb,EAAxCa,OAAsDb,EADzD,2BAE7BW,KACAR,SAHe,mCAKnBW,KANJF,IASAA,qBAAU,WACN,IACIF,iBAAwB,SAAAK,GAAK,OAAIZ,GAAJ,MAC7BO,sBAA6B,SAAAM,GAAK,OAAIX,EAAJ,MAClCK,iBAAwB,SAAAO,GAAU,OAAIV,EAAJ,MAClCG,iBAAwB,SAAAQ,GAAO,OAAIT,EAAJ,SAEpC,CAPHG,IAUI,kBAACjB,EAAD,UACEwB,MAAO,CACLjB,QADK,EAELE,SAFK,EAGLE,MAHK,EAILE,MAJK,EAKLY,MAAOV,EAAYA,EAAH,MAAqB,kBAAMW,YAAN,8CACrCC,gBAAiB,SAAAC,GAAY,OAAIV,oBAAqBU,GAAzB,OAG5BvB,EAXT,WC3BEwB,EAAS,CACXC,QAAS,CACLC,MAAO,QACPC,SAAU,QAEdC,QAAS,CACLF,MAAO,UACPC,SAAU,QAEdnB,MAAO,CACHkB,MAAO,UACPC,SAAU,SAIZE,EAAM,WAAO,IAAD,EDfgBC,qBAAN,GCgBhB5B,EADM,EACNA,QAASkB,EADH,EACGA,MAAOE,EADV,EACUA,gBADV,EAEgBrB,oBAAS,GAFzB,mBAEP8B,EAFO,KAEEC,EAFF,KAWd,OAPApB,qBAAU,WACDV,GAAY6B,IACbX,IACAY,GAAW,MAEhB,CAAC9B,EAASkB,EAAOW,IAGhB,0BACFE,SAAU,SAAAC,GACRA,EAAEC,iBACAb,MAGJ,6BAAK,kBAAC,EAAD,OACL,mCAKS,WAAAtB,GACX,OACI,kBAAC,EAAD,CACFoC,OA5CM,8CA6CNC,OA5CS,2BA6CTC,OAAQtC,EAAMsC,OACdd,OAAQA,GAER,kBAAC,EAAD,QC5CNe,IAASC,OACJ,kBAAC,EAAD,CAAKF,OAHK,OAIXG,SAASC,eAAe,U","file":"static/js/main.fc1e135d.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\"\nimport tags from '@paytheory/tags'\n\nexport const PayTheoryContext = React.createContext()\nexport const usePayTheory = () => useContext(PayTheoryContext)\nexport const CreditCardInput = () => (<div id=\"paytheory-credit-card\" />)\nexport const CreditCardProvider = (props) => {\n    const [loading, setLoading] = useState(true)\n    const [complete, setComplete] = useState(false)\n    const [valid, setValid] = useState(false)\n    const [error, setError] = useState(undefined)\n    const [payTheory, setPayTheory] = useState(undefined)\n\n    useEffect(() => {\n        const initPayTheory = async() => {\n            const payTheoryFromHook = await tags.create(props.apiKey, props.client, props.amount, props.styles)\n            setPayTheory(payTheoryFromHook)\n            setLoading(false)\n        };\n        initPayTheory()\n    }, [])\n\n    useEffect(() => {\n        if (payTheory) {\n            payTheory.readyObserver(ready => setLoading(!ready))\n            payTheory.transactedObserver(acted => setComplete(acted))\n            payTheory.validObserver(validation => setValid(validation))\n            payTheory.errorObserver(errored => setError(errored))\n        }\n    }, [payTheory])\n\n    return (\n        <PayTheoryContext.Provider\n          value={{\n            loading,\n            complete,\n            valid,\n            error,\n            mount: payTheory ? payTheory.mount : () => console.log('pay theory is not ready to mount payments'),\n            initTransaction: buyerOptions => tags.initTransaction(buyerOptions ? buyerOptions : {})\n          }}\n        >\n            {props.children}\n        </PayTheoryContext.Provider>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { CreditCardProvider, CreditCardInput, usePayTheory } from \"@paytheory/payments\";\nconst api = \"pt-sandbox-c421a13e91d2594cc627cdd982edb5ed\";\nconst client = \"IDvwtJwLdkja7CMk5oR6QNDk\";\nconst styles = {\n    default: {\n        color: \"black\",\n        fontSize: \"14px\"\n    },\n    success: {\n        color: \"#5cb85c\",\n        fontSize: \"14px\"\n    },\n    error: {\n        color: \"#d9534f\",\n        fontSize: \"14px\"\n    }\n};\n\nconst App = () => {\n    const { loading, mount, initTransaction } = usePayTheory();\n    const [mounted, setMounted] = useState(false);\n\n    useEffect(() => {\n        if (!loading && !mounted) {\n            mount();\n            setMounted(true);\n        }\n    }, [loading, mount, mounted]);\n\n    return (\n        <form\n      onSubmit={e => {\n        e.preventDefault();\n          initTransaction();\n      }}\n    >\n      <div><CreditCardInput /></div>\n      <button />\n    </form>\n    );\n};\n\nexport default props => {\n    return (\n        <CreditCardProvider\n      apiKey={api}\n      client={client}\n      amount={props.amount}\n      styles={styles}\n    >\n      <App />\n    </CreditCardProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nconst amount = 2581\n\nReactDOM.render(\n    (<App amount={amount} />),\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}